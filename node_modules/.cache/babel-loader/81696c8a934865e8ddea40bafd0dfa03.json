{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alin\\\\Desktop\\\\Projects\\\\class-commerce\\\\src\\\\Components\\\\Context.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext();\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProduct = id => {\n      this.setState({\n        currentProduct: id\n      });\n    };\n\n    this.updateCategory = name => {\n      this.setState({\n        currentCategory: name\n      });\n    };\n\n    this.updateCurrency = currentCurrency => {\n      this.setState({\n        currentCurrency\n      });\n    };\n\n    this.mergeObject = (product, selectedObject) => {\n      this.setState({\n        productCartForm: { ...product,\n          selectedObject\n        }\n      });\n    };\n\n    this.mergeAttributes = () => {\n      this.state.selectedArr.push(this.state.productCartForm);\n    };\n\n    this.addCart = id => {\n      const {\n        cart,\n        productCartForm\n      } = this.state;\n      const check = cart.every(item => {\n        return item.id !== id;\n      });\n\n      if (check) {\n        cart.push(productCartForm);\n        this.setState({\n          productCartForm: {}\n        });\n      } else {\n        alert(\"Product has already been added to the cart.\");\n      }\n    };\n\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: \"0\",\n      cart: [],\n      selectedObject: {},\n      selectedArr: [],\n      productCartForm: {},\n      productNoSelection: {},\n      product: {}\n    };\n  }\n\n  componentDidMount() {\n    this.loadCategories();\n    this.loadProduct();\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      categories\n    } = data || {};\n    this.setState({\n      categories\n    });\n    this.setState({\n      products: categories[0].products\n    });\n  }\n\n  async loadProduct() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      product\n    } = data || {};\n    this.setState({\n      product\n    });\n  }\n\n  render() {\n    const {\n      products,\n      categories,\n      currentCategory,\n      currentProduct,\n      currentCurrency,\n      cart,\n      selectedObject = {},\n      selectedArr,\n      productNoSelection,\n      productCartForm,\n      product\n    } = this.state;\n    const {\n      updateProduct,\n      updateCategory,\n      updateCurrency,\n      mergeObject,\n      mergeAttributes,\n      addCart\n    } = this; // console.log(currentCurrency)\n\n    return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n      value: {\n        products,\n        categories,\n        currentCategory,\n        currentProduct,\n        currentCurrency,\n        updateCategory,\n        updateProduct,\n        updateCurrency,\n        cart,\n        addCart,\n        selectedObject,\n        selectedArr,\n        productCartForm,\n        mergeObject,\n        mergeAttributes\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alin/Desktop/Projects/class-commerce/src/Components/Context.js"],"names":["React","Component","DataContext","createContext","DataProvider","constructor","props","updateProduct","id","setState","currentProduct","updateCategory","name","currentCategory","updateCurrency","currentCurrency","mergeObject","product","selectedObject","productCartForm","mergeAttributes","state","selectedArr","push","addCart","cart","check","every","item","alert","products","categories","productNoSelection","componentDidMount","loadCategories","loadProduct","res","fetch","method","headers","body","JSON","stringify","query","data","json","render","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\n\nexport const DataContext = React.createContext()\n\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: \"0\",\n      cart: [],\n      selectedObject: {},\n      selectedArr: [],\n      productCartForm: {},\n      productNoSelection: {},\n      product: {}\n    }\n  }\n  updateProduct = (id) => {\n    this.setState({ currentProduct: id })\n  }\n  updateCategory = (name) => {\n    this.setState({ currentCategory: name })\n  }\n  updateCurrency = (currentCurrency) => {\n    this.setState({ currentCurrency })\n  }\n\n  mergeObject = (product, selectedObject) => {\n    this.setState({ productCartForm: { ...product, selectedObject } })\n  }\n\n  mergeAttributes = () => {\n    this.state.selectedArr.push(this.state.productCartForm)\n  }\n\n  addCart = (id) => {\n    const { cart, productCartForm } = this.state;\n        const check = cart.every(item => {\n            return item.id !== id\n        })\n        if (check) {\n          cart.push(productCartForm)\n          this.setState({ productCartForm: {} })\n        } else {\n            alert(\"Product has already been added to the cart.\")\n        }\n    }\n\n\n  componentDidMount() {\n    this.loadCategories()\n    this.loadProduct()\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    })\n    const { data } = await res.json()\n    const { categories } = data || {}\n    this.setState({ categories })\n    this.setState({ products: categories[0].products })\n }\n\n async loadProduct() {\n  const res = await fetch(\"http://localhost:4000/\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n    })\n  })\n  const { data } = await res.json()\n  const { product } = data || {}\n  this.setState({ product })\n }\n\n  render() {\n    const { products, categories, currentCategory, currentProduct, currentCurrency, cart, selectedObject = {}, selectedArr, productNoSelection, productCartForm, product } = this.state\n    const { updateProduct, updateCategory, updateCurrency, mergeObject, mergeAttributes, addCart } = this\n      // console.log(currentCurrency)\n\n    return (\n      <DataContext.Provider\n        value={{ products, categories, currentCategory,\n           currentProduct, currentCurrency, updateCategory, updateProduct, updateCurrency, cart, addCart, selectedObject, selectedArr, productCartForm, mergeObject, mergeAttributes }}\n      >\n        {this.props.children}\n\n      </DataContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}