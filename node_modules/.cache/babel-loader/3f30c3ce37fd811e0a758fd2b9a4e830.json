{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alin\\\\Desktop\\\\Projects\\\\class-commerce\\\\src\\\\Components\\\\ProductPage\\\\ProductAttributes.js\";\nimport React, { Component } from \"react\";\nimport \"./ProductPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ProductAttributes extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = (name, item) => {\n      const {\n        selectedAttributes\n      } = this.state;\n      this.setState({\n        selectedAttributes: { ...selectedAttributes,\n          [name]: item\n        }\n      });\n    };\n\n    this.state = {\n      selectedAttributes: {}\n    };\n  }\n\n  render() {\n    const {\n      attributes\n    } = this.props;\n    const {\n      selectedAttributes = {}\n    } = this.state; // TODO: extract as attribute component, logica de afisare a selectorului\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), items.map(item => {\n        var _selectedAttributes$n;\n\n        const {\n          id,\n          value\n        } = item;\n        const selected = ((_selectedAttributes$n = selectedAttributes[name]) === null || _selectedAttributes$n === void 0 ? void 0 : _selectedAttributes$n.value) === value;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          onClick: () => this.handleChange(name, item),\n          children: [value, \" \", \" \", selected && \"X\"]\n        }, value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 26\n        }, this);\n      })]\n    }, name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default ProductAttributes;","map":{"version":3,"sources":["C:/Users/Alin/Desktop/Projects/class-commerce/src/Components/ProductPage/ProductAttributes.js"],"names":["React","Component","ProductAttributes","constructor","props","handleChange","name","item","selectedAttributes","state","setState","render","attributes","items","map","id","value","selected"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,mBAAP;;AAEA,OAAO,MAAMC,iBAAN,SAAgCD,SAAhC,CAA0C;AAE/CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,YAPmB,GAOJ,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC7B,YAAM;AAAEC,QAAAA;AAAF,UAAyB,KAAKC,KAApC;AACA,WAAKC,QAAL,CAAc;AAAEF,QAAAA,kBAAkB,EAAE,EAClC,GAAGA,kBAD+B;AAElC,WAACF,IAAD,GAAQC;AAF0B;AAAtB,OAAd;AAID,KAbkB;;AAEjB,SAAKE,KAAL,GAAa;AACXD,MAAAA,kBAAkB,EAAE;AADT,KAAb;AAGD;;AAUDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAiB,KAAKR,KAA5B;AACA,UAAM;AAAEI,MAAAA,kBAAkB,GAAG;AAAvB,QAA8B,KAAKC,KAAzC,CAFO,CAGsB;;AAC7B,wBACE;AAAA,8BACE;AAAA,kBAAMH;AAAN;AAAA;AAAA;AAAA;AAAA,cADF,EAEGO,KAAK,CAACC,GAAN,CAAWP,IAAD,IAAU;AAAA;;AACN,cAAM;AAAEQ,UAAAA,EAAF;AAAMC,UAAAA;AAAN,YAAgBT,IAAtB;AACD,cAAMU,QAAQ,GAAG,0BAAAT,kBAAkB,CAACF,IAAD,CAAlB,gFAA0BU,KAA1B,MAAoCA,KAArD;AACC,4BACE;AAEE,UAAA,SAAS,EAAC,MAFZ;AAGE,UAAA,OAAO,EAAE,MAAM,KAAKX,YAAL,CAAkBC,IAAlB,EAAwBC,IAAxB,CAHjB;AAAA,qBAKGS,KALH,OAKW,GALX,EAKgBC,QAAQ,IAAI,GAL5B;AAAA,WACOD,KADP;AAAA;AAAA;AAAA;AAAA,gBADF;AASA,OAZd,CAFH;AAAA,OAAUV,IAAV;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AAxC8C;AA6CjD,eAAeJ,iBAAf","sourcesContent":["import React, { Component } from \"react\"\nimport \"./ProductPage.css\"\n\nexport class ProductAttributes extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedAttributes: {}\n    }\n  }\n\n  handleChange = (name, item) => {\n    const { selectedAttributes } = this.state\n    this.setState({ selectedAttributes: {\n      ...selectedAttributes,\n      [name]: item\n    } })\n  }\n\n  render() {\n    const { attributes } = this.props\n    const { selectedAttributes = {} } = this.state\n                                 // TODO: extract as attribute component, logica de afisare a selectorului\n    return (\n      <div key={name}>\n        <div>{name}</div>\n        {items.map((item) => {\n                       const { id, value } = item\n                      const selected = selectedAttributes[name]?.value === value\n                       return (\n                         <div\n                           key={value}\n                           className=\"text\"\n                           onClick={() => this.handleChange(name, item)}\n                         >\n                           {value} {\" \"}{selected && \"X\"}\n                         </div>\n                       )\n                      })\n                    }\n      </div>\n    )\n  }\n\n}\n\n\nexport default ProductAttributes"]},"metadata":{},"sourceType":"module"}