{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alin\\\\Desktop\\\\Projects\\\\class-commerce\\\\src\\\\Components\\\\Context.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext();\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProduct = id => {\n      this.setState({\n        currentProduct: id\n      });\n    };\n\n    this.updateCategory = name => {\n      this.setState({\n        currentCategory: name\n      });\n    };\n\n    this.updateCurrency = currency => {\n      this.setState({\n        currenctCurrency: currency\n      });\n    };\n\n    this.addCart = (id, _ref) => {\n      let {\n        selectedObject\n      } = _ref;\n      const {\n        products,\n        productIds\n      } = this.state;\n      const check = productIds.every(item => {\n        return item.id !== id;\n      });\n\n      if (check) {\n        const data = products.filter(product => product.id === id);\n        this.setState({\n          productids: [...productIds, ...data]\n        });\n        this.setState({\n          cart: [...productIds, ...selectedObject]\n        });\n      } else {\n        alert(\"product added to cart\"); // TO DO: increase quantity\n      }\n    };\n\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: 0,\n      productIds: [],\n      cart: [],\n      selectedObject: {}\n    };\n  }\n\n  componentDidMount() {\n    this.loadCategories();\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      categories\n    } = data || {};\n    this.setState({\n      categories\n    });\n    this.setState({\n      products: categories[0].products\n    });\n  }\n\n  render() {\n    const {\n      products,\n      categories,\n      currentCategory,\n      currentProduct,\n      currentCurrency,\n      cart,\n      selectedObject,\n      productIds\n    } = this.state;\n    const {\n      updateProduct,\n      updateCategory,\n      updateCurrency,\n      addCart\n    } = this; // console.log(productIds)\n\n    console.log(selectedObject);\n    return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n      value: {\n        products,\n        categories,\n        currentCategory,\n        currentProduct,\n        currentCurrency,\n        updateCategory,\n        updateProduct,\n        updateCurrency,\n        cart,\n        addCart,\n        selectedObject,\n        productIds\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alin/Desktop/Projects/class-commerce/src/Components/Context.js"],"names":["React","Component","DataContext","createContext","DataProvider","constructor","props","updateProduct","id","setState","currentProduct","updateCategory","name","currentCategory","updateCurrency","currency","currenctCurrency","addCart","selectedObject","products","productIds","state","check","every","item","data","filter","product","productids","cart","alert","categories","currentCurrency","componentDidMount","loadCategories","res","fetch","method","headers","body","JSON","stringify","query","json","render","console","log","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\n\nexport const DataContext = React.createContext()\n\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: 0,\n      productIds: [],\n      cart: [],\n      selectedObject: {}\n    }\n  }\n  updateProduct = (id) => {\n    this.setState({ currentProduct: id })\n  }\n  updateCategory = (name) => {\n    this.setState({ currentCategory: name })\n  }\n  updateCurrency = (currency) => {\n    this.setState({ currenctCurrency: currency })\n  }\n\n  addCart = (id, { selectedObject }) => {\n    const { products, productIds } = this.state\n    const check = productIds.every(item => {\n      return item.id !== id\n    })\n    if (check) {\n      const data = products.filter(product => product.id === id)\n      this.setState({ productids: [ ...productIds, ...data ] })\n      this.setState({ cart: [...productIds, ...selectedObject] })\n    } else {\n      alert(\"product added to cart\")// TO DO: increase quantity\n    }\n  }\n\n\n  componentDidMount() {\n    this.loadCategories()\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    })\n    const { data } = await res.json()\n    const { categories } = data || {}\n    this.setState({ categories })\n    this.setState({ products: categories[0].products })\n }\n\n\n  render() {\n    const { products, categories, currentCategory, currentProduct, currentCurrency, cart, selectedObject, productIds } = this.state\n    const { updateProduct, updateCategory, updateCurrency, addCart } = this\n   // console.log(productIds)\n    console.log(selectedObject)\n    return (\n      <DataContext.Provider\n        value={{ products, categories, currentCategory,\n           currentProduct, currentCurrency, updateCategory, updateProduct, updateCurrency, cart, addCart, selectedObject, productIds }}\n      >\n        {this.props.children}\n      </DataContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}