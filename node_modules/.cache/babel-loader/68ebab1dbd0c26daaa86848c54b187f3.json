{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alin\\\\Desktop\\\\Projects\\\\class-commerce\\\\src\\\\Components\\\\Context.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext();\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProduct = id => {\n      this.setState({\n        currentProduct: id\n      });\n    };\n\n    this.updateCategory = name => {\n      this.setState({\n        currentCategory: name\n      });\n    };\n\n    this.updateCurrency = currency => {\n      this.setState({\n        currenctCurrency: currency\n      });\n    };\n\n    this.addCart = id => {\n      const {\n        products,\n        cart\n      } = this.state;\n      const check = cart.every(item => {\n        return item.id !== id;\n      });\n\n      if (check) {\n        const data = products.filter(product => {\n          return product.id === id;\n        });\n        this.setState({\n          cart: [...cart, ...data]\n        });\n      } else {\n        alert(\"product added to cart\");\n      }\n    };\n\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: 0\n    };\n  }\n\n  componentDidMount() {\n    this.loadCategories();\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      categories\n    } = data || {};\n    this.setState({\n      categories\n    });\n    this.setState({\n      products: categories[0].products\n    });\n  }\n\n  render() {\n    const {\n      products,\n      categories,\n      currentCategory,\n      currentProduct,\n      currentCurrency\n    } = this.state;\n    const {\n      updateProduct,\n      updateCategory,\n      updateCurrency,\n      addCart\n    } = this; // console.log(products)\n\n    return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n      value: {\n        products,\n        categories,\n        currentCategory,\n        currentProduct,\n        currentCurrency,\n        updateCategory,\n        updateProduct,\n        updateCurrency,\n        addCart\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alin/Desktop/Projects/class-commerce/src/Components/Context.js"],"names":["React","Component","DataContext","createContext","DataProvider","constructor","props","updateProduct","id","setState","currentProduct","updateCategory","name","currentCategory","updateCurrency","currency","currenctCurrency","addCart","products","cart","state","check","every","item","data","filter","product","alert","categories","currentCurrency","componentDidMount","loadCategories","res","fetch","method","headers","body","JSON","stringify","query","json","render","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\n\nexport const DataContext = React.createContext()\n\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: 0\n    }\n  }\n  updateProduct = (id) => {\n    this.setState({ currentProduct: id })\n  }\n  updateCategory = (name) => {\n    this.setState({ currentCategory: name })\n  }\n  updateCurrency = (currency) => {\n    this.setState({ currenctCurrency: currency })\n  }\n\n  addCart = (id) => {\n    const { products, cart } = this.state\n    const check = cart.every(item => {\n      return item.id !== id\n    })\n    if (check) {\n      const data = products.filter(product => {\n        return product.id === id\n      })\n      this.setState({ cart: [...cart, ...data] })\n    } else {\n      alert(\"product added to cart\")\n    }\n  }\n\n  componentDidMount() {\n    this.loadCategories()\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    })\n    const { data } = await res.json()\n    const { categories } = data || {}\n    this.setState({ categories })\n    this.setState({ products: categories[0].products })\n }\n\n\n  render() {\n    const { products, categories, currentCategory, currentProduct, currentCurrency } = this.state\n    const { updateProduct, updateCategory, updateCurrency, addCart } = this\n    // console.log(products)\n    return (\n      <DataContext.Provider\n        value={{ products, categories, currentCategory,\n           currentProduct, currentCurrency, updateCategory, updateProduct, updateCurrency, addCart }}\n      >\n        {this.props.children}\n      </DataContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}