{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alin\\\\Desktop\\\\Projects\\\\class-commerce\\\\src\\\\Components\\\\Context.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext();\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProduct = id => {\n      this.setState({\n        currentProduct: id\n      });\n    };\n\n    this.updateCategory = name => {\n      this.setState({\n        currentCategory: name\n      });\n    };\n\n    this.updateCurrency = currency => {\n      this.setState({\n        currenctCurrency: currency\n      });\n    };\n\n    this.addCart = id => {\n      const {\n        products,\n        cart\n      } = this.state;\n      const check = cart.every(item => {\n        return item.id !== id;\n      });\n\n      if (check) {\n        const data = products.filter(product => product.id === id);\n        this.setState({\n          cart: [...cart, ...data]\n        });\n        this.setState({\n          productCartForm: { ...product,\n            ...this.context.selectedObject\n          }\n        });\n      } else {\n        alert(\"product added to cart\"); // TO DO: increase quantity\n      }\n    };\n\n    this.mergeObject = (product, selectedObject) => this.setState({\n      productCartForm: {\n        product,\n        selectedObject\n      }\n    });\n\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: 0,\n      cart: [],\n      selectedObject: {},\n      productCartForm: {},\n      productNoSelection: {},\n      product: {}\n    };\n  }\n\n  componentDidMount() {\n    this.loadCategories();\n    this.loadProduct();\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      categories\n    } = data || {};\n    this.setState({\n      categories\n    });\n    this.setState({\n      products: categories[0].products\n    });\n  }\n\n  async loadProduct() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      product\n    } = data || {};\n    this.setState({\n      product\n    });\n  }\n\n  render() {\n    const {\n      products,\n      categories,\n      currentCategory,\n      currentProduct,\n      currentCurrency,\n      cart,\n      selectedObject,\n      productNoSelection,\n      productCartForm,\n      product\n    } = this.state;\n    const {\n      updateProduct,\n      updateCategory,\n      updateCurrency,\n      addCart,\n      mergeObject\n    } = this;\n    console.log(productCartForm);\n    return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n      value: {\n        products,\n        categories,\n        currentCategory,\n        currentProduct,\n        currentCurrency,\n        updateCategory,\n        updateProduct,\n        updateCurrency,\n        cart,\n        addCart,\n        selectedObject,\n        productCartForm,\n        mergeObject\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alin/Desktop/Projects/class-commerce/src/Components/Context.js"],"names":["React","Component","DataContext","createContext","DataProvider","constructor","props","updateProduct","id","setState","currentProduct","updateCategory","name","currentCategory","updateCurrency","currency","currenctCurrency","addCart","products","cart","state","check","every","item","data","filter","product","productCartForm","context","selectedObject","alert","mergeObject","categories","currentCurrency","productNoSelection","componentDidMount","loadCategories","loadProduct","res","fetch","method","headers","body","JSON","stringify","query","json","render","console","log","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,EAApB;AAEP,OAAO,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAC1CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAenBC,aAfmB,GAeFC,EAAD,IAAQ;AACtB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,cAAc,EAAEF;AAAlB,OAAd;AACD,KAjBkB;;AAAA,SAkBnBG,cAlBmB,GAkBDC,IAAD,IAAU;AACzB,WAAKH,QAAL,CAAc;AAAEI,QAAAA,eAAe,EAAED;AAAnB,OAAd;AACD,KApBkB;;AAAA,SAqBnBE,cArBmB,GAqBDC,QAAD,IAAc;AAC7B,WAAKN,QAAL,CAAc;AAAEO,QAAAA,gBAAgB,EAAED;AAApB,OAAd;AACD,KAvBkB;;AAAA,SAyBnBE,OAzBmB,GAyBRT,EAAD,IAAQ;AAChB,YAAM;AAAEU,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAqB,KAAKC,KAAhC;AACA,YAAMC,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAWC,IAAI,IAAI;AAC/B,eAAOA,IAAI,CAACf,EAAL,KAAYA,EAAnB;AACD,OAFa,CAAd;;AAGA,UAAIa,KAAJ,EAAW;AACT,cAAMG,IAAI,GAAGN,QAAQ,CAACO,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAAClB,EAAR,KAAeA,EAA1C,CAAb;AACA,aAAKC,QAAL,CAAc;AAAEU,UAAAA,IAAI,EAAE,CAAE,GAAGA,IAAL,EAAW,GAAGK,IAAd;AAAR,SAAd;AACA,aAAKf,QAAL,CAAc;AAAEkB,UAAAA,eAAe,EAAE,EAAE,GAAGD,OAAL;AAAc,eAAG,KAAKE,OAAL,CAAaC;AAA9B;AAAnB,SAAd;AACD,OAJD,MAIO;AACLC,QAAAA,KAAK,CAAC,uBAAD,CAAL,CADK,CACyB;AAC/B;AACF,KArCkB;;AAAA,SAoInBC,WApImB,GAoIL,CAACL,OAAD,EAAUG,cAAV,KAA6B,KAAKpB,QAAL,CAAc;AAAEkB,MAAAA,eAAe,EAAE;AAAED,QAAAA,OAAF;AAAWG,QAAAA;AAAX;AAAnB,KAAd,CApIxB;;AAEjB,SAAKT,KAAL,GAAa;AACXF,MAAAA,QAAQ,EAAE,EADC;AAEXc,MAAAA,UAAU,EAAE,EAFD;AAGXnB,MAAAA,eAAe,EAAE,KAHN;AAIXH,MAAAA,cAAc,EAAE,MAJL;AAKXuB,MAAAA,eAAe,EAAE,CALN;AAMXd,MAAAA,IAAI,EAAE,EANK;AAOXU,MAAAA,cAAc,EAAE,EAPL;AAQXF,MAAAA,eAAe,EAAE,EARN;AASXO,MAAAA,kBAAkB,EAAE,EATT;AAUXR,MAAAA,OAAO,EAAE;AAVE,KAAb;AAYD;;AA0BDS,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,cAAL;AACA,SAAKC,WAAL;AACD;;AAEmB,QAAdD,cAAc,GAAG;AACrB,UAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,wBAAD,EAA2B;AAChDC,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFuC;AAGhDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjC2B,OAAf;AAH0C,KAA3B,CAAvB;AAuCA,UAAM;AAAErB,MAAAA;AAAF,QAAW,MAAMc,GAAG,CAACQ,IAAJ,EAAvB;AACA,UAAM;AAAEd,MAAAA;AAAF,QAAiBR,IAAI,IAAI,EAA/B;AACA,SAAKf,QAAL,CAAc;AAAEuB,MAAAA;AAAF,KAAd;AACA,SAAKvB,QAAL,CAAc;AAAES,MAAAA,QAAQ,EAAEc,UAAU,CAAC,CAAD,CAAV,CAAcd;AAA1B,KAAd;AACF;;AAEgB,QAAXmB,WAAW,GAAG;AACnB,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,wBAAD,EAA2B;AAChDC,MAAAA,MAAM,EAAE,MADwC;AAEhDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFuC;AAGhDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAG;AACd;AACA,4BAA4B,KAAKzB,KAAL,CAAWV,cAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9ByB,OAAf;AAH0C,KAA3B,CAAvB;AAoCA,UAAM;AAAEc,MAAAA;AAAF,QAAW,MAAMc,GAAG,CAACQ,IAAJ,EAAvB;AACA,UAAM;AAAEpB,MAAAA;AAAF,QAAcF,IAAI,IAAI,EAA5B;AACA,SAAKf,QAAL,CAAc;AAAEiB,MAAAA;AAAF,KAAd;AACA;;AAEAqB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE7B,MAAAA,QAAF;AAAYc,MAAAA,UAAZ;AAAwBnB,MAAAA,eAAxB;AAAyCH,MAAAA,cAAzC;AAAyDuB,MAAAA,eAAzD;AAA0Ed,MAAAA,IAA1E;AAAgFU,MAAAA,cAAhF;AAAgGK,MAAAA,kBAAhG;AAAoHP,MAAAA,eAApH;AAAqID,MAAAA;AAArI,QAAiJ,KAAKN,KAA5J;AACA,UAAM;AAAEb,MAAAA,aAAF;AAAiBI,MAAAA,cAAjB;AAAiCG,MAAAA,cAAjC;AAAiDG,MAAAA,OAAjD;AAA0Dc,MAAAA;AAA1D,QAA0E,IAAhF;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYtB,eAAZ;AACA,wBACE,QAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AAAET,QAAAA,QAAF;AAAYc,QAAAA,UAAZ;AAAwBnB,QAAAA,eAAxB;AACJH,QAAAA,cADI;AACYuB,QAAAA,eADZ;AAC6BtB,QAAAA,cAD7B;AAC6CJ,QAAAA,aAD7C;AAC4DO,QAAAA,cAD5D;AAC4EK,QAAAA,IAD5E;AACkFF,QAAAA,OADlF;AAC2FY,QAAAA,cAD3F;AAC2GF,QAAAA,eAD3G;AAC4HI,QAAAA;AAD5H,OADT;AAAA,gBAIG,KAAKzB,KAAL,CAAW4C;AAJd;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAlJyC","sourcesContent":["import React, { Component } from \"react\"\n\nexport const DataContext = React.createContext()\n\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: 0,\n      cart: [],\n      selectedObject: {},\n      productCartForm: {},\n      productNoSelection: {},\n      product: {}\n    }\n  }\n  updateProduct = (id) => {\n    this.setState({ currentProduct: id })\n  }\n  updateCategory = (name) => {\n    this.setState({ currentCategory: name })\n  }\n  updateCurrency = (currency) => {\n    this.setState({ currenctCurrency: currency })\n  }\n\n  addCart = (id) => {\n    const { products, cart } = this.state\n    const check = cart.every(item => {\n      return item.id !== id\n    })\n    if (check) {\n      const data = products.filter(product => product.id === id)\n      this.setState({ cart: [ ...cart, ...data ] })\n      this.setState({ productCartForm: { ...product, ...this.context.selectedObject } })\n    } else {\n      alert(\"product added to cart\")// TO DO: increase quantity\n    }\n  }\n\n\n  componentDidMount() {\n    this.loadCategories()\n    this.loadProduct()\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    })\n    const { data } = await res.json()\n    const { categories } = data || {}\n    this.setState({ categories })\n    this.setState({ products: categories[0].products })\n }\n\n async loadProduct() {\n  const res = await fetch(\"http://localhost:4000/\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n    })\n  })\n  const { data } = await res.json()\n  const { product } = data || {}\n  this.setState({ product })\n }\n  mergeObject = (product, selectedObject) => this.setState({ productCartForm: { product, selectedObject } })\n  render() {\n    const { products, categories, currentCategory, currentProduct, currentCurrency, cart, selectedObject, productNoSelection, productCartForm, product } = this.state\n    const { updateProduct, updateCategory, updateCurrency, addCart, mergeObject } = this\n    console.log(productCartForm)\n    return (\n      <DataContext.Provider\n        value={{ products, categories, currentCategory,\n           currentProduct, currentCurrency, updateCategory, updateProduct, updateCurrency, cart, addCart, selectedObject, productCartForm, mergeObject }}\n      >\n        {this.props.children}\n      </DataContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}