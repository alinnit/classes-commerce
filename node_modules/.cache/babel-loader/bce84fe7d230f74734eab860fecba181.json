{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alin\\\\Desktop\\\\Projects\\\\class-commerce\\\\src\\\\Components\\\\Context.js\";\nimport React, { Component } from \"react\";\nimport { findRenderedDOMComponentWithClass } from \"react-dom/test-utils\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext();\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProduct = id => {\n      this.setState({\n        currentProduct: id\n      });\n    };\n\n    this.updateCategory = name => {\n      this.setState({\n        currentCategory: name\n      });\n    };\n\n    this.updateCurrency = currentCurrency => {\n      this.setState({\n        currentCurrency\n      });\n    };\n\n    this.getCartKey = _ref => {\n      let {\n        product,\n        selectedAttributes\n      } = _ref;\n      const {\n        name\n      } = product;\n\n      const attributesKey = _.sortBy(Object.entries(selectedAttributes), _ref2 => {\n        let [name] = _ref2;\n        return name;\n      }).map(_ref3 => {\n        let [name, item] = _ref3;\n        return `${name}-${item.id}`;\n      }).join(\"-\").concat(name);\n\n      return attributesKey;\n    };\n\n    this.addCart = (product, selectedAttributes) => {\n      const {\n        cart\n      } = this.state;\n      const cartKey = this.getCartKey(cartKey);\n      const cartItem = cart[cartKey] || {\n        product,\n        selectedAttributes\n      };\n      this.setState({\n        cart: { ...cart,\n          [cartKey]: { ...cartItem,\n            qty: ((cartItem === null || cartItem === void 0 ? void 0 : cartItem.qty) || 0) + 1\n          }\n        }\n      });\n    };\n\n    this.deleteCart = (product, selectedAttributes) => {\n      const {\n        cart\n      } = this.state;\n      const cartKey = this.getCartKey(cartKey);\n      const cartItem = cart[cartKey] || {\n        product,\n        selectedAttributes\n      };\n      this.setState({\n        cart: { ...cart,\n          [cartKey]: { ...cartItem,\n            qty: ((cartItem === null || cartItem === void 0 ? void 0 : cartItem.qty) || 1) - 1\n          }\n        }\n      });\n    };\n\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: \"0\",\n      cart: {},\n      product: {}\n    };\n  }\n\n  componentDidMount() {\n    this.loadCategories();\n    this.loadProduct();\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      categories\n    } = data || {};\n    this.setState({\n      categories\n    });\n    this.setState({\n      products: categories[0].products\n    });\n  }\n\n  async loadProduct() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      product\n    } = data || {};\n    this.setState({\n      product\n    });\n  }\n\n  render() {\n    const {\n      products,\n      categories,\n      currentCategory,\n      currentProduct,\n      currentCurrency,\n      cart\n    } = this.state;\n    const {\n      updateProduct,\n      updateCategory,\n      updateCurrency,\n      addCart\n    } = this;\n    console.log(cart);\n    return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n      value: {\n        products,\n        categories,\n        currentCategory,\n        currentProduct,\n        currentCurrency,\n        updateCategory,\n        updateProduct,\n        updateCurrency,\n        cart,\n        addCart\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alin/Desktop/Projects/class-commerce/src/Components/Context.js"],"names":["React","Component","findRenderedDOMComponentWithClass","_","DataContext","createContext","DataProvider","constructor","props","updateProduct","id","setState","currentProduct","updateCategory","name","currentCategory","updateCurrency","currentCurrency","getCartKey","product","selectedAttributes","attributesKey","sortBy","Object","entries","map","item","join","concat","addCart","cart","state","cartKey","cartItem","qty","deleteCart","products","categories","componentDidMount","loadCategories","loadProduct","res","fetch","method","headers","body","JSON","stringify","query","data","json","render","console","log","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { findRenderedDOMComponentWithClass } from \"react-dom/test-utils\"\nimport _ from \"lodash\"\n\n\nexport const DataContext = React.createContext()\n\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: \"0\",\n      cart: {},\n      product: {}\n    }\n  }\n\n  updateProduct = (id) => {\n    this.setState({ currentProduct: id })\n  }\n\n  updateCategory = (name) => {\n    this.setState({ currentCategory: name })\n  }\n\n  updateCurrency = (currentCurrency) => {\n    this.setState({ currentCurrency })\n  }\n\n  getCartKey = ({ product, selectedAttributes }) => {\n    const { name } = product\n    const attributesKey = _.sortBy(Object.entries(selectedAttributes), ([name]) => name)\n      .map(([name, item]) => `${name}-${item.id}`)\n      .join(\"-\")\n      .concat(name)\n    return attributesKey\n  }\n\n  addCart = (product, selectedAttributes) => {\n    const { cart } = this.state\n    const cartKey = this.getCartKey(cartKey)\n    const cartItem = cart[cartKey] || { product, selectedAttributes }\n      this.setState({ cart: {\n        ...cart,\n        [cartKey]: {\n          ...cartItem,\n          qty: (cartItem?.qty || 0) + 1\n        }\n      } })\n    }\n\n\n  deleteCart = (product, selectedAttributes) => {\n    const { cart } = this.state\n    const cartKey = this.getCartKey(cartKey)\n    const cartItem = cart[cartKey] || { product, selectedAttributes }\n      this.setState({ cart: {\n        ...cart,\n        [cartKey]: {\n          ...cartItem,\n          qty: (cartItem?.qty || 1) - 1\n        }\n      } })\n\n  }\n\n\n  componentDidMount() {\n    this.loadCategories()\n    this.loadProduct()\n  }\n\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    })\n    const { data } = await res.json()\n    const { categories } = data || {}\n    this.setState({ categories })\n    this.setState({ products: categories[0].products })\n }\n\n async loadProduct() {\n  const res = await fetch(\"http://localhost:4000/\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n    })\n  })\n  const { data } = await res.json()\n  const { product } = data || {}\n  this.setState({ product })\n }\n\n  render() {\n    const { products, categories, currentCategory, currentProduct, currentCurrency, cart } = this.state\n    const { updateProduct, updateCategory, updateCurrency, addCart } = this\n    console.log(cart)\n    return (\n      <DataContext.Provider\n        value={{ products, categories, currentCategory, currentProduct, currentCurrency, updateCategory, updateProduct, updateCurrency, cart, addCart }}\n      >\n        {this.props.children}\n\n      </DataContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}