{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alin\\\\Desktop\\\\Projects\\\\class-commerce\\\\src\\\\Components\\\\Context.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext();\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProduct = id => {\n      this.setState({\n        currentProduct: id\n      });\n    };\n\n    this.updateCategory = name => {\n      this.setState({\n        currentCategory: name\n      });\n    };\n\n    this.updateCurrency = currency => {\n      this.setState({\n        currenctCurrency: currency\n      });\n    };\n\n    this.mergeObject = (product, selectedObject, selectedArr) => {\n      this.setState({\n        productCartForm: { ...product,\n          selectedObject\n        }\n      });\n      selectedArr.push(this.state.productCartForm);\n    };\n\n    this.addCart = id => {\n      const {\n        cart,\n        productCartForm\n      } = this.state;\n      const check = cart.every(item => {\n        return item.id !== id;\n      });\n\n      if (check) {\n        cart.push(productCartForm);\n      } else {\n        alert(\"Product has already been added to the cart.\");\n      }\n    };\n\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: 0,\n      cart: [],\n      selectedObject: {},\n      selectedArr: [],\n      productCartForm: {},\n      productNoSelection: {},\n      product: {}\n    };\n  }\n\n  componentDidMount() {\n    this.loadCategories();\n    this.loadProduct();\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      categories\n    } = data || {};\n    this.setState({\n      categories\n    });\n    this.setState({\n      products: categories[0].products\n    });\n  }\n\n  async loadProduct() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      product\n    } = data || {};\n    this.setState({\n      product\n    });\n  }\n\n  render() {\n    const {\n      products,\n      categories,\n      currentCategory,\n      currentProduct,\n      currentCurrency,\n      cart,\n      selectedObject = {},\n      selectedArr,\n      productNoSelection,\n      productCartForm,\n      product\n    } = this.state;\n    const {\n      updateProduct,\n      updateCategory,\n      updateCurrency,\n      mergeObject,\n      addCart\n    } = this;\n    console.log(selectedObject);\n    console.log(selectedArr);\n    return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n      value: {\n        products,\n        categories,\n        currentCategory,\n        currentProduct,\n        currentCurrency,\n        updateCategory,\n        updateProduct,\n        updateCurrency,\n        cart,\n        addCart,\n        selectedObject,\n        selectedArr,\n        productCartForm,\n        mergeObject\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alin/Desktop/Projects/class-commerce/src/Components/Context.js"],"names":["React","Component","DataContext","createContext","DataProvider","constructor","props","updateProduct","id","setState","currentProduct","updateCategory","name","currentCategory","updateCurrency","currency","currenctCurrency","mergeObject","product","selectedObject","selectedArr","productCartForm","push","state","addCart","cart","check","every","item","alert","products","categories","currentCurrency","productNoSelection","componentDidMount","loadCategories","loadProduct","res","fetch","method","headers","body","JSON","stringify","query","data","json","render","console","log","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\n\nexport const DataContext = React.createContext()\n\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: {},\n      categories: [],\n      currentCategory: \"all\",\n      currentProduct: \"ps-5\",\n      currentCurrency: 0,\n      cart: [],\n      selectedObject: {},\n      selectedArr: [],\n      productCartForm: {},\n      productNoSelection: {},\n      product: {}\n    }\n  }\n  updateProduct = (id) => {\n    this.setState({ currentProduct: id })\n  }\n  updateCategory = (name) => {\n    this.setState({ currentCategory: name })\n  }\n  updateCurrency = (currency) => {\n    this.setState({ currenctCurrency: currency })\n  }\n\n  mergeObject = (product, selectedObject, selectedArr) => {\n    this.setState({ productCartForm: { ...product, selectedObject } })\n    selectedArr.push(this.state.productCartForm)\n  }\n  addCart = (id) => {\n    const { cart, productCartForm } = this.state;\n        const check = cart.every(item => {\n            return item.id !== id\n        })\n        if (check) {\n          cart.push(productCartForm)\n        } else {\n            alert(\"Product has already been added to the cart.\")\n        }\n    }\n\n\n  componentDidMount() {\n    this.loadCategories()\n    this.loadProduct()\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    })\n    const { data } = await res.json()\n    const { categories } = data || {}\n    this.setState({ categories })\n    this.setState({ products: categories[0].products })\n }\n\n async loadProduct() {\n  const res = await fetch(\"http://localhost:4000/\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n    })\n  })\n  const { data } = await res.json()\n  const { product } = data || {}\n  this.setState({ product })\n }\n\n  render() {\n    const { products, categories, currentCategory, currentProduct, currentCurrency, cart, selectedObject = {}, selectedArr, productNoSelection, productCartForm, product } = this.state\n    const { updateProduct, updateCategory, updateCurrency, mergeObject, addCart } = this\n     console.log(selectedObject)\n     console.log(selectedArr)\n\n    return (\n      <DataContext.Provider\n        value={{ products, categories, currentCategory,\n           currentProduct, currentCurrency, updateCategory, updateProduct, updateCurrency, cart, addCart, selectedObject, selectedArr, productCartForm, mergeObject }}\n      >\n        {this.props.children}\n\n      </DataContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}