{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alin\\\\Desktop\\\\Projects\\\\class-commerce\\\\src\\\\Components\\\\Context.js\";\nimport React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/React.createContext();\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProduct = id => {\n      this.setState({\n        currentProduct: id\n      });\n    };\n\n    this.updateCurrency = currentCurrency => {\n      this.setState({\n        currentCurrency\n      });\n    };\n\n    this.getCartKey = _ref => {\n      let {\n        product,\n        selectedAttributes\n      } = _ref;\n      const {\n        name\n      } = product;\n\n      const attributesKey = _.sortBy(Object.entries(selectedAttributes), _ref2 => {\n        let [name] = _ref2;\n        return name;\n      }).map(_ref3 => {\n        let [name, item] = _ref3;\n        return `${name}-${item.id}`;\n      }).join(\"-\").concat(name);\n\n      return attributesKey;\n    };\n\n    this.addCart = (product, selectedAttributes) => {\n      const {\n        cart\n      } = this.state;\n      const cartKey = this.getCartKey({\n        product,\n        selectedAttributes\n      });\n      const cartItem = cart[cartKey] || {\n        product,\n        selectedAttributes\n      };\n      this.setState({\n        cart: { ...cart,\n          [cartKey]: { ...cartItem,\n            qty: ((cartItem === null || cartItem === void 0 ? void 0 : cartItem.qty) || 0) + 1\n          }\n        }\n      });\n    };\n\n    this.deleteCart = (product, selectedAttributes) => {\n      const {\n        cart\n      } = this.state;\n      const cartKey = this.getCartKey({\n        product,\n        selectedAttributes\n      });\n      const cartItem = cart[cartKey] || {\n        product,\n        selectedAttributes\n      };\n      const qty = ((cartItem === null || cartItem === void 0 ? void 0 : cartItem.qty) || 1) - 1;\n\n      if (qty) {\n        this.setState({\n          cart: { ...cart,\n            [cartKey]: { ...cartItem,\n              qty\n            }\n          }\n        });\n      } else {\n        this.setState({\n          cart: _.pickBy({ ...cart,\n            [cartKey]: false\n          }, Boolean)\n        });\n      }\n    };\n\n    this.state = {\n      products: {},\n      categories: [],\n      currentProduct: \"ps-5\",\n      currentCurrency: \"0\",\n      cart: {},\n      product: {}\n    };\n  }\n\n  componentDidMount() {\n    this.loadCategories();\n    this.loadProduct();\n  }\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      categories\n    } = data || {};\n    this.setState({\n      categories\n    });\n    this.setState({\n      products: categories[0].products\n    });\n  }\n\n  async loadProduct() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n      })\n    });\n    const {\n      data\n    } = await res.json();\n    const {\n      product\n    } = data || {};\n    this.setState({\n      product\n    });\n  }\n\n  render() {\n    const {\n      products,\n      categories,\n      currentProduct,\n      currentCurrency,\n      cart\n    } = this.state;\n    const {\n      updateProduct,\n      updateCurrency,\n      addCart,\n      deleteCart\n    } = this;\n    console.log(cart);\n    return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n      value: {\n        products,\n        categories,\n        currentProduct,\n        currentCurrency,\n        updateProduct,\n        updateCurrency,\n        cart,\n        addCart,\n        deleteCart\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alin/Desktop/Projects/class-commerce/src/Components/Context.js"],"names":["React","Component","_","DataContext","createContext","DataProvider","constructor","props","updateProduct","id","setState","currentProduct","updateCurrency","currentCurrency","getCartKey","product","selectedAttributes","name","attributesKey","sortBy","Object","entries","map","item","join","concat","addCart","cart","state","cartKey","cartItem","qty","deleteCart","pickBy","Boolean","products","categories","componentDidMount","loadCategories","loadProduct","res","fetch","method","headers","body","JSON","stringify","query","data","json","render","console","log","children"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport _ from \"lodash\"\n\n\nexport const DataContext = React.createContext()\n\nexport class DataProvider extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      products: {},\n      categories: [],\n      currentProduct: \"ps-5\",\n      currentCurrency: \"0\",\n      cart: {},\n      product: {}\n    }\n  }\n\n  updateProduct = (id) => {\n    this.setState({ currentProduct: id })\n  }\n\n  updateCurrency = (currentCurrency) => {\n    this.setState({ currentCurrency })\n  }\n\n  getCartKey = ({ product, selectedAttributes }) => {\n    const { name } = product\n    const attributesKey = _.sortBy(Object.entries(selectedAttributes), ([name]) => name)\n      .map(([name, item]) => `${name}-${item.id}`)\n      .join(\"-\")\n      .concat(name)\n    return attributesKey\n  }\n\n  addCart = (product, selectedAttributes) => {\n    const { cart } = this.state\n    const cartKey = this.getCartKey({ product, selectedAttributes })\n    const cartItem = cart[cartKey] || { product, selectedAttributes }\n      this.setState({ cart: {\n        ...cart,\n        [cartKey]: {\n          ...cartItem,\n          qty: (cartItem?.qty || 0) + 1\n        }\n      } })\n    }\n\n\n  deleteCart = (product, selectedAttributes) => {\n    const { cart } = this.state\n    const cartKey = this.getCartKey({ product, selectedAttributes })\n    const cartItem = cart[cartKey] || { product, selectedAttributes }\n    const qty = (cartItem?.qty || 1) - 1\n    if (qty) {\n      this.setState({ cart: {\n        ...cart,\n        [cartKey]: {\n          ...cartItem,\n          qty\n        }\n      } })\n    } else {\n\n      this.setState({ cart: _.pickBy({\n        ...cart,\n        [cartKey]: false\n      }, Boolean)\n    })\n    }\n\n\n  }\n\n\n  componentDidMount() {\n    this.loadCategories()\n    this.loadProduct()\n  }\n\n\n  async loadCategories() {\n    const res = await fetch(\"http://localhost:4000/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `\n          query {\n            categories {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n                brand\n              }\n            }\n        }\n         `\n      })\n    })\n    const { data } = await res.json()\n    const { categories } = data || {}\n    this.setState({ categories })\n    this.setState({ products: categories[0].products })\n }\n\n async loadProduct() {\n  const res = await fetch(\"http://localhost:4000/\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query {\n            product (id: \"${this.state.currentProduct}\") { \n            id\n            name\n            inStock\n            gallery\n            description\n            category\n            attributes {\n              id\n              name\n              type\n              items {\n                displayValue\n                value\n                id\n              }\n            }\n            prices {\n              currency {\n                label\n                symbol\n              }\n              amount\n            }\n            brand\n          }\n        }\n       `\n    })\n  })\n  const { data } = await res.json()\n  const { product } = data || {}\n  this.setState({ product })\n }\n\n  render() {\n    const { products, categories, currentProduct, currentCurrency, cart } = this.state\n    const { updateProduct, updateCurrency, addCart, deleteCart } = this\n    console.log(cart)\n    return (\n      <DataContext.Provider\n        value={{ products, categories, currentProduct, currentCurrency, updateProduct, updateCurrency, cart, addCart, deleteCart }}\n      >\n        {this.props.children}\n\n      </DataContext.Provider>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}